
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 11.4.0-1ubuntu1~22.04 -fPIC -Os)


-- Parsing `/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: /home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v
Parsing Verilog input from `/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v' to AST representation.
Generating RTLIL representation for module `\clock'.
Generating RTLIL representation for module `\main'.
Successfully finished Verilog frontend.

-- Running command `tcl /root/symbiflow/quicklogic-arch-defs/share/quicklogic/synth.tcl' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

2. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\VCC'.
Generating RTLIL representation for module `\GND'.
Generating RTLIL representation for module `\fpga_interconnect'.
Generating RTLIL representation for module `\CLOCK_CELL'.
Generating RTLIL representation for module `\BIDIR_CELL'.
Generating RTLIL representation for module `\SDIOMUX_CELL'.
Generating RTLIL representation for module `\T_FRAG'.
Generating RTLIL representation for module `\B_FRAG'.
Generating RTLIL representation for module `\Q_FRAG'.
Generating RTLIL representation for module `\F_FRAG'.
Generating RTLIL representation for module `\C_FRAG'.
Generating RTLIL representation for module `\ASSP'.
Generating RTLIL representation for module `\MULT'.
Generating RTLIL representation for module `\GMUX_IP'.
Generating RTLIL representation for module `\GMUX_IC'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_sim.v' to AST representation.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE0_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D0_PR1_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR0_WSA2_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA0_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA1_WSB2_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB0_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB1_VPR'.
Generating RTLIL representation for module `\RAM_CE1_FE1_D1_PR1_WSA2_WSB2_VPR'.
Successfully finished Verilog frontend.

4. Executing SYNTH_QUICKLOGIC pass.

4.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v' to AST representation.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\AND2I0'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux2x1'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\ahb_gen_bfm'.
Generating RTLIL representation for module `\oscillator_s1'.
Generating RTLIL representation for module `\sdma_bfm'.
Generating RTLIL representation for module `\ahb2fb_asynbrig_if'.
Generating RTLIL representation for module `\fb2ahb_asynbrig_if'.
Generating RTLIL representation for module `\ahb2fb_asynbrig'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro_bfm'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\fifo_controller_model'.
Generating RTLIL representation for module `\ram'.
Warning: Replacing memory \ram with list of registers. See /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3671, /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3585, /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_sim.v:3560
Generating RTLIL representation for module `\x2_model'.
Generating RTLIL representation for module `\ram_block_8K'.
Generating RTLIL representation for module `\sw_mux'.
Generating RTLIL representation for module `\ram8k_2x1_cell'.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Generating RTLIL representation for module `\gpio_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\signed_mult'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Generating RTLIL representation for module `\RAM_8K_BLK'.
Generating RTLIL representation for module `\RAM_16K_BLK'.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
Successfully finished Verilog frontend.

4.3. Executing HIERARCHY pass (managing design hierarchy).

4.3.1. Finding top of design hierarchy..
root of   1 design levels: main                
root of   0 design levels: clock               
Automatically selected main as design top module.

4.3.2. Analyzing design hierarchy..
Top module:  \main
Used module:     \clock

4.3.3. Analyzing design hierarchy..
Top module:  \main
Used module:     \clock
Removed 0 unused modules.

4.4. Executing PROC pass (convert processes to netlists).

4.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$290 in module MULT.
Marked 2 switch rules as full_case in process $proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$272 in module Q_FRAG.
Marked 4 switch rules as full_case in process $proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:126$237 in module main.
Marked 2 switch rules as full_case in process $proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:103$231 in module main.
Removed a total of 0 dead cases.

4.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 34 assignments to connections.

4.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$273'.
  Set init value: \QZ = 1'0
Found init rule in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:84$255'.
  Set init value: \aclk = 1'0
Found init rule in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:83$254'.
  Set init value: \pulse_active = 1'0
Found init rule in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:82$253'.
  Set init value: \pulse_remain = 16'0000000000000000
Found init rule in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:76$252'.
  Set init value: \b4_prev = 1'0
Found init rule in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:76$251'.
  Set init value: \b3_prev = 1'0
Found init rule in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:76$250'.
  Set init value: \b2_prev = 1'0
Found init rule in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:76$249'.
  Set init value: \b1_prev = 1'0
Found init rule in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:75$248'.
  Set init value: \paused = 1'0
Found init rule in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:72$247'.
  Set init value: \mux_index = 3'000
Found init rule in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:71$246'.
  Set init value: \mux_counter = 23'00000000000000000000000
Found init rule in `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:11$220'.
  Set init value: \b = 4'0000
Found init rule in `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:10$219'.
  Set init value: \a = 4'0000
Found init rule in `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:9$218'.
  Set init value: \c = 4'0000
Found init rule in `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:8$217'.
  Set init value: \d = 4'0000
Found init rule in `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:7$216'.
  Set init value: \f = 4'0000
Found init rule in `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:6$215'.
  Set init value: \e = 4'0000

4.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \QST in `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$272'.
Found async reset \QRT in `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$272'.

4.4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MULT.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$290'.
     1/2: $0\Cmult[63:0] [63:32]
     2/2: $0\Cmult[63:0] [31:0]
Creating decoders for process `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$273'.
Creating decoders for process `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$272'.
     1/1: $0\QZ[0:0]
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:84$255'.
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:83$254'.
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:82$253'.
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:76$252'.
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:76$251'.
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:76$250'.
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:76$249'.
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:75$248'.
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:72$247'.
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:71$246'.
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:126$237'.
     1/3: $0\aclk[0:0]
     2/3: $0\pulse_active[0:0]
     3/3: $0\pulse_remain[15:0]
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:103$231'.
     1/4: $0\power[5:0]
     2/4: $0\disp[3:0]
     3/4: $0\mux_counter[22:0]
     4/4: $0\mux_index[2:0]
Creating decoders for process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:93$227'.
     1/1: $0\paused[0:0]
Creating decoders for process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:11$220'.
Creating decoders for process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:10$219'.
Creating decoders for process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:9$218'.
Creating decoders for process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:8$217'.
Creating decoders for process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:7$216'.
Creating decoders for process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:6$215'.
Creating decoders for process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.

4.4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\MULT.\Cmult' using process `\MULT.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$290'.
  created direct connection (no actual register cell created).
Creating register for signal `\Q_FRAG.\QZ' using process `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$272'.
Warning: Complex async reset for dff `\QZ'.
  created $dffsr cell `$procdff$1209' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\main.\pulse_remain' using process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:126$237'.
  created $dff cell `$procdff$1210' with positive edge clock.
Creating register for signal `\main.\pulse_active' using process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:126$237'.
  created $dff cell `$procdff$1211' with positive edge clock.
Creating register for signal `\main.\aclk' using process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:126$237'.
  created $dff cell `$procdff$1212' with positive edge clock.
Creating register for signal `\main.\power' using process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:103$231'.
  created $dff cell `$procdff$1213' with positive edge clock.
Creating register for signal `\main.\disp' using process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:103$231'.
  created $dff cell `$procdff$1214' with positive edge clock.
Creating register for signal `\main.\mux_counter' using process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:103$231'.
  created $dff cell `$procdff$1215' with positive edge clock.
Creating register for signal `\main.\mux_index' using process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:103$231'.
  created $dff cell `$procdff$1216' with positive edge clock.
Creating register for signal `\main.\paused' using process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:93$227'.
  created $dff cell `$procdff$1217' with positive edge clock.
Creating register for signal `\main.\b1_prev' using process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:93$227'.
  created $dff cell `$procdff$1218' with positive edge clock.
Creating register for signal `\main.\b2_prev' using process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:93$227'.
  created $dff cell `$procdff$1219' with positive edge clock.
Creating register for signal `\main.\b3_prev' using process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:93$227'.
  created $dff cell `$procdff$1220' with positive edge clock.
Creating register for signal `\main.\b4_prev' using process `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:93$227'.
  created $dff cell `$procdff$1221' with positive edge clock.
Creating register for signal `\clock.\h2' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1222' with positive edge clock.
Creating register for signal `\clock.\h1' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1223' with positive edge clock.
Creating register for signal `\clock.\m2' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1224' with positive edge clock.
Creating register for signal `\clock.\m1' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1225' with positive edge clock.
Creating register for signal `\clock.\s2' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1226' with positive edge clock.
Creating register for signal `\clock.\s1' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1227' with positive edge clock.
Creating register for signal `\clock.\temp' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1228' with positive edge clock.
Creating register for signal `\clock.\e' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1229' with positive edge clock.
Creating register for signal `\clock.\f' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1230' with positive edge clock.
Creating register for signal `\clock.\d' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1231' with positive edge clock.
Creating register for signal `\clock.\c' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1232' with positive edge clock.
Creating register for signal `\clock.\a' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1233' with positive edge clock.
Creating register for signal `\clock.\b' using process `\clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
  created $dff cell `$procdff$1234' with positive edge clock.

4.4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\MULT.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$290'.
Removing empty process `MULT.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:4781$290'.
Removing empty process `Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:0$273'.
Found and cleaned up 1 empty switch in `\Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$272'.
Removing empty process `Q_FRAG.$proc$/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_sim.v:242$272'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:84$255'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:83$254'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:82$253'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:76$252'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:76$251'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:76$250'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:76$249'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:75$248'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:72$247'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:71$246'.
Found and cleaned up 8 empty switches in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:126$237'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:126$237'.
Found and cleaned up 2 empty switches in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:103$231'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:103$231'.
Found and cleaned up 1 empty switch in `\main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:93$227'.
Removing empty process `main.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:93$227'.
Removing empty process `clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:11$220'.
Removing empty process `clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:10$219'.
Removing empty process `clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:9$218'.
Removing empty process `clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:8$217'.
Removing empty process `clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:7$216'.
Removing empty process `clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:6$215'.
Removing empty process `clock.$proc$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:12$1'.
Cleaned up 16 empty switches.

4.5. Executing FLATTEN pass (flatten design).
Deleting now unused module clock.
<suppressed ~1 debug messages>

4.6. Executing TRIBUF pass.

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.
<suppressed ~9 debug messages>

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..
Removed 3 unused cells and 68 unused wires.
<suppressed ~5 debug messages>

4.9. Executing DEMINOUT pass (demote inout ports to input or output).

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
<suppressed ~168 debug messages>
Removed a total of 56 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$1141: \pulse_active -> 1'1
      Replacing known input bits on port A of cell $procmux$1139: \pulse_active -> 1'1
      Replacing known input bits on port A of cell $procmux$1144: \pulse_active -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \main.
Performed a total of 0 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..
Removed 0 unused cells and 56 unused wires.
<suppressed ~1 debug messages>

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \main.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.13. Executing CHECK pass (checking for obvious problems).
checking module main..
found and reported 0 problems.

4.14. Executing OPT pass (performing simple optimizations).

4.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \main.
Performed a total of 0 changes.

4.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.14.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.14.9. Finished OPT passes. (There is nothing left to do.)

4.15. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 23) from port B of cell main.$eq$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:105$232 ($eq).
Removed top 31 bits (of 32) from port B of cell main.$add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:107$234 ($add).
Removed top 28 bits (of 32) from port Y of cell main.$add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:107$234 ($add).
Removed top 29 bits (of 32) from mux cell main.$ternary$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:107$235 ($mux).
Removed top 31 bits (of 32) from port B of cell main.$add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:109$236 ($add).
Removed top 9 bits (of 32) from port Y of cell main.$add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:109$236 ($add).
Removed top 31 bits (of 32) from port B of cell main.$gt$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:146$243 ($gt).
Removed top 31 bits (of 32) from port B of cell main.$sub$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:148$244 ($sub).
Removed top 16 bits (of 32) from port Y of cell main.$sub$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:148$244 ($sub).
Removed top 15 bits (of 16) from port B of cell main.$eq$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:149$245 ($eq).
Removed top 1 bits (of 3) from port B of cell main.$procmux$1177_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell main.$procmux$1178_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell main.$procmux$1179_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell main.$flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:24$95 ($and).
Removed top 1 bits (of 4) from port B of cell main.$flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:16$41 ($and).
Removed top 1 bits (of 4) from port Y of cell main.$add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:107$234 ($add).
Removed top 29 bits (of 32) from wire main.$add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:107$234_Y.
Removed top 9 bits (of 32) from wire main.$add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:109$236_Y.
Removed top 16 bits (of 32) from wire main.$sub$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:148$244_Y.
Removed top 29 bits (of 32) from wire main.$ternary$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:107$235_Y.

4.16. Executing PEEPOPT pass (run peephole optimizers).

4.17. Executing PMUXTREE pass.

4.18. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..
Removed 4 unused cells and 10 unused wires.
<suppressed ~5 debug messages>

4.19. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module main:
  creating $macc model for $add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:107$234 ($add).
  creating $macc model for $add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:109$236 ($add).
  creating $macc model for $sub$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:148$244 ($sub).
  creating $alu model for $macc $sub$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:148$244.
  creating $alu model for $macc $add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:109$236.
  creating $alu model for $macc $add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:107$234.
  creating $alu model for $gt$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:146$243 ($gt): new $alu
  creating $alu cell for $gt$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:146$243: $auto$alumacc.cc:485:replace_alu$1280
  creating $alu cell for $add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:107$234: $auto$alumacc.cc:485:replace_alu$1285
  creating $alu cell for $add$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:109$236: $auto$alumacc.cc:485:replace_alu$1288
  creating $alu cell for $sub$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:148$244: $auto$alumacc.cc:485:replace_alu$1291
  created 4 $alu and 0 $macc cells.

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.
<suppressed ~3 debug messages>

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \main.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.20.9. Rerunning OPT passes. (Maybe there is more to do..)

4.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \main.
Performed a total of 0 changes.

4.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.20.16. Finished OPT passes. (There is nothing left to do.)

4.21. Executing FSM pass (extract and optimize FSM).

4.21.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking main.power as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

4.21.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.21.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.21.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.21.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.21.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.21.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.22.5. Finished fast OPT passes.

4.23. Executing MEMORY pass.

4.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.23.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.23.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.23.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.23.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.23.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.25. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.26. Executing PP3_BRAMINIT pass.
cell type $auto$alumacc.cc:485:replace_alu$1280
cell type $auto$alumacc.cc:485:replace_alu$1285
cell type $auto$alumacc.cc:485:replace_alu$1288
cell type $auto$alumacc.cc:485:replace_alu$1291
cell type $auto$pmuxtree.cc:35:or_generator$1251
cell type $auto$pmuxtree.cc:37:or_generator$1255
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1243
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1245
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1247
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1249
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1253
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1257
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1263
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1265
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1267
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1269
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1273
cell type $auto$pmuxtree.cc:65:recursive_mux_generator$1277
cell type $eq$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:105$232
cell type $eq$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:107$233
cell type $eq$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:149$245
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$11
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$13
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$15
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$17
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$20
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$22
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$4
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$6
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$8
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:14$27
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:14$28
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:15$32
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:15$33
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:15$35
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:15$38
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:15$39
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:16$41
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:16$43
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:17$45
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:17$47
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:17$48
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:17$50
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$53
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$55
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$57
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$60
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$62
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$64
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$66
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$69
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$71
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:20$73
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:20$75
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:21$77
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:21$79
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:21$81
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:21$82
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:23$86
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:23$87
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:23$89
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:23$92
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:23$93
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:24$95
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:24$97
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:25$101
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:25$102
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:25$104
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:25$99
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$107
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$109
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$111
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$114
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$116
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$118
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$120
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$123
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$125
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:28$127
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:28$129
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:29$131
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:29$133
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:29$135
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:29$136
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$139
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$141
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$143
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$146
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$148
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$150
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$152
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$155
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$157
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:32$159
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:32$161
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$165
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$167
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$169
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$171
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$173
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$175
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$177
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$179
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$180
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$182
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$184
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$185
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$186
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$188
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$190
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$191
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$193
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$194
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$196
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$197
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$199
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$201
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$202
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:35$204
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:36$206
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:37$208
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:38$210
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:39$212
cell type $flatten\mainclock.$and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:40$214
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$10
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$12
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$16
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$5
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:15$29
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:15$30
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:15$31
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:16$42
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:17$49
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$51
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$52
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$54
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$65
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:20$74
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:23$83
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:23$84
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:23$85
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:24$96
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:25$103
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$105
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$106
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$108
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$119
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:28$128
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$137
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$138
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$140
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$151
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:32$160
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$164
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$166
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$168
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$170
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$172
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$174
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:33$176
cell type $flatten\mainclock.$not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:35$203
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$14
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$18
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$23
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:13$9
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:15$36
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:15$40
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:16$44
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$58
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$63
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$67
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:19$72
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:20$76
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:23$90
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:23$94
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:24$98
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$112
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$117
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$121
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:27$126
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:28$130
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$144
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$149
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$153
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:31$158
cell type $flatten\mainclock.$or$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:32$162
cell type $flatten\mainclock.$procdff$1222
cell type $flatten\mainclock.$procdff$1223
cell type $flatten\mainclock.$procdff$1224
cell type $flatten\mainclock.$procdff$1225
cell type $flatten\mainclock.$procdff$1226
cell type $flatten\mainclock.$procdff$1227
cell type $flatten\mainclock.$procdff$1229
cell type $flatten\mainclock.$procdff$1230
cell type $flatten\mainclock.$procdff$1231
cell type $flatten\mainclock.$procdff$1232
cell type $flatten\mainclock.$procdff$1233
cell type $flatten\mainclock.$procdff$1234
cell type $logic_and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:132$241
cell type $logic_and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:77$222
cell type $logic_and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:78$224
cell type $logic_and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:79$226
cell type $logic_and$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:98$229
cell type $logic_not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:77$221
cell type $logic_not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:78$223
cell type $logic_not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:79$225
cell type $not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:98$228
cell type $not$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:99$230
cell type $procdff$1210
cell type $procdff$1211
cell type $procdff$1212
cell type $procdff$1213
cell type $procdff$1214
cell type $procdff$1215
cell type $procdff$1216
cell type $procdff$1217
cell type $procdff$1218
cell type $procdff$1219
cell type $procdff$1220
cell type $procdff$1221
cell type $procmux$1129
cell type $procmux$1132
cell type $procmux$1135
cell type $procmux$1137
cell type $procmux$1139
cell type $procmux$1141
cell type $procmux$1144
cell type $procmux$1147
cell type $procmux$1150
cell type $procmux$1152
cell type $procmux$1155
cell type $procmux$1157
cell type $procmux$1160
cell type $procmux$1163
cell type $procmux$1166
cell type $procmux$1168
cell type $procmux$1171
cell type $procmux$1176_CMP0
cell type $procmux$1177_CMP0
cell type $procmux$1178_CMP0
cell type $procmux$1179_CMP0
cell type $procmux$1180_CMP0
cell type $procmux$1190
cell type $procmux$1193
cell type $procmux$1195
cell type $ternary$/home/ysiddhanth/Desktop/dump/Clock-project/verilog/clock.v:107$235
cell type u_qlal4s3b_cell_macro

4.27. Executing TECHMAP pass (map to technology primitives).

4.27.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB16K'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:21: Warning: Identifier `\VCC' is implicitly declared.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:22: Warning: Identifier `\GND' is implicitly declared.
Generating RTLIL representation for module `\$__QUICKLOGIC_RAMB8K'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:235: Warning: Identifier `\GND' is implicitly declared.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:236: Warning: Identifier `\VCC' is implicitly declared.
Generating RTLIL representation for module `\RAM_8K_BLK'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:538: Warning: Range [17:0] select out of bounds on signal `\out_reg0': Setting 2 MSB bits to undef.
Generating RTLIL representation for module `\RAM_16K_BLK'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:824: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_8K_BLK'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:998: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 20 MSB bits to undef.
Generating RTLIL representation for module `\FIFO_16K_BLK'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_brams_map.v:1249: Warning: Range [35:0] select out of bounds on signal `\out_reg0': Setting 4 MSB bits to undef.
Successfully finished Verilog frontend.

4.27.2. Continuing TECHMAP pass.
No more expansions possible.

4.28. Executing OPT pass (performing simple optimizations).

4.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.
<suppressed ~28 debug messages>

4.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.28.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

4.28.5. Finished fast OPT passes.

4.29. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.30. Executing OPT pass (performing simple optimizations).

4.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \main.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1243:
      Old ports: A=6'001000, B=6'010000, Y=$auto$rtlil.cc:2037:Mux$1244
      New ports: A=2'01, B=2'10, Y=$auto$rtlil.cc:2037:Mux$1244 [4:3]
      New connections: { $auto$rtlil.cc:2037:Mux$1244 [5] $auto$rtlil.cc:2037:Mux$1244 [2:0] } = 4'0000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1247:
      Old ports: A=6'000010, B=6'000100, Y=$auto$rtlil.cc:2037:Mux$1248
      New ports: A=2'01, B=2'10, Y=$auto$rtlil.cc:2037:Mux$1248 [2:1]
      New connections: { $auto$rtlil.cc:2037:Mux$1248 [5:3] $auto$rtlil.cc:2037:Mux$1248 [0] } = 4'0000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1249:
      Old ports: A=6'000000, B=6'000001, Y=$auto$rtlil.cc:2037:Mux$1250
      New ports: A=1'0, B=1'1, Y=$auto$rtlil.cc:2037:Mux$1250 [0]
      New connections: $auto$rtlil.cc:2037:Mux$1250 [5:1] = 5'00000
  Optimizing cells in module \main.
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1245:
      Old ports: A=$auto$rtlil.cc:2037:Mux$1244, B=6'100000, Y=$auto$rtlil.cc:2037:Mux$1246
      New ports: A={ 1'0 $auto$rtlil.cc:2037:Mux$1244 [4:3] }, B=3'100, Y=$auto$rtlil.cc:2037:Mux$1246 [5:3]
      New connections: $auto$rtlil.cc:2037:Mux$1246 [2:0] = 3'000
    Consolidated identical input bits for $mux cell $auto$pmuxtree.cc:65:recursive_mux_generator$1253:
      Old ports: A=$auto$rtlil.cc:2037:Mux$1250, B=$auto$rtlil.cc:2037:Mux$1248, Y=$auto$rtlil.cc:2037:Mux$1254
      New ports: A={ 2'00 $auto$rtlil.cc:2037:Mux$1250 [0] }, B={ $auto$rtlil.cc:2037:Mux$1248 [2:1] 1'0 }, Y=$auto$rtlil.cc:2037:Mux$1254 [2:0]
      New connections: $auto$rtlil.cc:2037:Mux$1254 [5:3] = 3'000
  Optimizing cells in module \main.
Performed a total of 5 changes.

4.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.30.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.30.9. Rerunning OPT passes. (Maybe there is more to do..)

4.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \main..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \main.
Performed a total of 0 changes.

4.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.30.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.30.16. Finished OPT passes. (There is nothing left to do.)

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/techmap.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=23\Y_WIDTH=23 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=1\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=23 for cells of type $lcu.
No more expansions possible.
<suppressed ~894 debug messages>

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.
<suppressed ~409 debug messages>

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
<suppressed ~165 debug messages>
Removed a total of 55 cells.

4.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..
Removed 47 unused cells and 265 unused wires.
<suppressed ~48 debug messages>

4.32.5. Finished fast OPT passes.

4.33. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module main..
  Treeifying 168 MUXes:
    Found tree with 1 MUXes at root $0\paused[0:0].
    Found tree with 2 MUXes at root $0\power[5:0] [0].
    Found tree with 2 MUXes at root $0\power[5:0] [1].
    Found tree with 2 MUXes at root $0\power[5:0] [2].
    Found tree with 2 MUXes at root $0\power[5:0] [3].
    Found tree with 2 MUXes at root $0\power[5:0] [4].
    Found tree with 1 MUXes at root $0\power[5:0] [5].
    Found tree with 6 MUXes at root $0\disp[3:0] [0].
    Found tree with 6 MUXes at root $0\disp[3:0] [1].
    Found tree with 6 MUXes at root $0\disp[3:0] [2].
    Found tree with 6 MUXes at root $0\disp[3:0] [3].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [0].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [1].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [2].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [3].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [4].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [5].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [6].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [7].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [8].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [9].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [10].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [11].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [12].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [13].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [14].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [15].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [16].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [17].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [18].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [19].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [20].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [21].
    Found tree with 1 MUXes at root $0\mux_counter[22:0] [22].
    Found tree with 2 MUXes at root $0\mux_index[2:0] [0].
    Found tree with 2 MUXes at root $0\mux_index[2:0] [1].
    Found tree with 2 MUXes at root $0\mux_index[2:0] [2].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [0].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [1].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [2].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [3].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [4].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [5].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [6].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [7].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [8].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [9].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [10].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [11].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [12].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [13].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [14].
    Found tree with 6 MUXes at root $0\pulse_remain[15:0] [15].
    Found tree with 5 MUXes at root $0\pulse_active[0:0].
    Found tree with 2 MUXes at root $0\aclk[0:0].
    Finished treeification: Found 55 trees.
  Covering trees:
    Replaced tree at $0\paused[0:0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\power[5:0] [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\power[5:0] [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\power[5:0] [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\power[5:0] [3]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\power[5:0] [4]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\power[5:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\disp[3:0] [0]: 0 MUX2, 0 MUX4, 1 MUX8, 0 MUX16
    Replaced tree at $0\disp[3:0] [1]: 0 MUX2, 0 MUX4, 1 MUX8, 0 MUX16
    Replaced tree at $0\disp[3:0] [2]: 0 MUX2, 0 MUX4, 1 MUX8, 0 MUX16
    Replaced tree at $0\disp[3:0] [3]: 0 MUX2, 0 MUX4, 1 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_counter[22:0] [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_index[2:0] [0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_index[2:0] [1]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\mux_index[2:0] [2]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [0]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [1]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [2]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [3]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [4]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [5]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [6]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [7]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [8]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [9]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [10]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [11]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [12]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [13]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [14]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_remain[15:0] [15]: 3 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\pulse_active[0:0]: 2 MUX2, 1 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $0\aclk[0:0]: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 4 decoder MUXes.
<suppressed ~4504 debug messages>

4.34. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.35. Executing OPT pass (performing simple optimizations).

4.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.35.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..
Removed 0 unused cells and 18 unused wires.
<suppressed ~2 debug messages>

4.35.5. Finished fast OPT passes.

4.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.37. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.38. Executing OPT_RMDFF pass (remove dff with constant values).

4.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.40. Executing OPT pass (performing simple optimizations).

4.40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.40.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \main..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.40.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \main.
Performed a total of 0 changes.

4.40.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.40.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.40.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.40.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.40.9. Finished OPT passes. (There is nothing left to do.)

4.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.42. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Transforming FF to FF+Enable cells in module main:
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3132 for $0\mux_index[2:0] [0] -> \mux_index [0].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1784.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3139 for $0\mux_index[2:0] [1] -> \mux_index [1].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1785.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3146 for $0\mux_index[2:0] [2] -> \mux_index [2].
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1786.
  created $_DFFE_PP_ cell $auto$dff2dffe.cc:219:handle_dff_cell$3153 for $0\paused[0:0] -> \paused.
  removing now obsolete cell $auto$simplemap.cc:420:simplemap_dff$1787.

4.43. Executing TECHMAP pass (map to technology primitives).

4.43.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.43.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~107 debug messages>

4.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.
<suppressed ~8 debug messages>

4.45. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.46. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

4.48. Executing OPT_RMDFF pass (remove dff with constant values).

4.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..
Removed 0 unused cells and 338 unused wires.
<suppressed ~1 debug messages>

4.50. Executing OPT pass (performing simple optimizations).

4.50.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.50.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.50.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \main..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.50.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \main.
Performed a total of 0 changes.

4.50.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\main'.
Removed a total of 0 cells.

4.50.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.50.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..

4.50.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.

4.50.9. Finished OPT passes. (There is nothing left to do.)

4.51. Executing TECHMAP pass (map to technology primitives).

4.51.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Successfully finished Verilog frontend.

4.51.2. Continuing TECHMAP pass.
No more expansions possible.

4.52. Executing ABC pass (technology mapping using ABC).

4.52.1. Extracting gate netlist of module `\main' to `<abc-temp-dir>/input.blif'..
Extracted 552 gates and 647 wires to a netlist network with 93 inputs and 115 outputs.

4.52.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.52.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      201
ABC RESULTS:        internal signals:      439
ABC RESULTS:           input signals:       93
ABC RESULTS:          output signals:      115
Removing temp directory.

4.53. Executing TECHMAP pass (map to technology primitives).

4.53.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFSR_NPP_'.
Generating RTLIL representation for module `\$_DFFSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Successfully finished Verilog frontend.

4.53.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 0 unused cells and 437 unused wires.

4.54. Executing TECHMAP pass (map to technology primitives).

4.54.1. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX8_'.
Generating RTLIL representation for module `\$_MUX4_'.
Generating RTLIL representation for module `\$_MUX_'.
Generating RTLIL representation for module `\$_NOT_'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
/root/symbiflow/bin/../share/yosys/quicklogic/pp3_cells_map.v:44: Warning: Identifier `\Valid_mult_w' is implicitly declared.
Successfully finished Verilog frontend.

4.54.2. Executing Verilog-2005 frontend: /root/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v
Parsing Verilog input from `/root/symbiflow/bin/../share/yosys/quicklogic/pp3_lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.54.3. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template \$_MUX4_ for cells of type $_MUX4_.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00101100 for cells of type $lut.
Using template \$_MUX8_ for cells of type $_MUX8_.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
No more expansions possible.
<suppressed ~664 debug messages>
Removed 0 unused cells and 586 unused wires.

4.55. Executing Quicklogic_EQN pass (calculate equations for luts).

4.56. Updated 201 of LUT* elements with equation.

4.57. Executing AUTONAME pass.
Renamed 4895 objects in module main (46 iterations).
<suppressed ~490 debug messages>

4.58. Executing HIERARCHY pass (managing design hierarchy).

4.58.1. Analyzing design hierarchy..
Top module:  \main

4.58.2. Analyzing design hierarchy..
Top module:  \main
Removed 0 unused modules.

4.59. Printing statistics.

=== main ===

   Number of wires:                197
   Number of wire bits:            375
   Number of public wires:         197
   Number of public wire bits:     375
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                330
     LUT1                            4
     LUT2                           90
     LUT3                           97
     LUT4                           10
     dff                           103
     dffe                            4
     mux4x0                         17
     mux8x0                          4
     qlal4s3b_cell_macro             1

4.60. Executing CHECK pass (checking for obvious problems).
checking module main..
Warning: Wire main.aclk has an unprocessed 'init' attribute.
Warning: Wire main.b1_prev has an unprocessed 'init' attribute.
Warning: Wire main.b2_prev has an unprocessed 'init' attribute.
Warning: Wire main.b3_prev has an unprocessed 'init' attribute.
Warning: Wire main.b4_prev has an unprocessed 'init' attribute.
Warning: Wire main.mainclock.a has an unprocessed 'init' attribute.
Warning: Wire main.mainclock.b has an unprocessed 'init' attribute.
Warning: Wire main.mainclock.c has an unprocessed 'init' attribute.
Warning: Wire main.mainclock.d has an unprocessed 'init' attribute.
Warning: Wire main.mainclock.e has an unprocessed 'init' attribute.
Warning: Wire main.mainclock.f has an unprocessed 'init' attribute.
Warning: Wire main.mux_counter has an unprocessed 'init' attribute.
Warning: Wire main.mux_index has an unprocessed 'init' attribute.
Warning: Wire main.paused has an unprocessed 'init' attribute.
Warning: Wire main.pulse_active has an unprocessed 'init' attribute.
Warning: Wire main.pulse_remain has an unprocessed 'init' attribute.
found and reported 16 problems.

4.61. Executing CLKBUFMAP pass (inserting global clock buffers).
Inserting $_BUF_ on main.aclk[0].
Inserting $_BUF_ on main.clk[0].

4.62. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port main.b1 using inpad.
Mapping port main.b2 using inpad.
Mapping port main.b3 using inpad.
Mapping port main.b4 using inpad.
Mapping port main.disp using outpad.
Mapping port main.power using outpad.

4.63. Executing SPLITNETS pass (splitting up multi-bit signals).

4.64. Executing SETUNDEF pass (replace undef values with defined constants).

4.65. Executing HILOMAP pass (mapping to constant drivers).

4.66. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..
Removed 0 unused cells and 43 unused wires.
<suppressed ~43 debug messages>

4.67. Executing CHECK pass (checking for obvious problems).
checking module main..
found and reported 0 problems.

5. Printing statistics.

=== main ===

   Number of wires:                350
   Number of wire bits:            350
   Number of public wires:         335
   Number of public wire bits:     335
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                346
     LUT1                            4
     LUT2                           90
     LUT3                           97
     LUT4                           10
     dff                           103
     dffe                            4
     inpad                           4
     logic_0                         1
     logic_1                         1
     mux4x0                         17
     mux8x0                          4
     outpad                         10
     qlal4s3b_cell_macro             1

Loading PCF from '/home/ysiddhanth/Desktop/dump/Clock-project/verilog/quickfeather.pcf'...
Loading pinmap CSV from '/root/symbiflow/quicklogic-arch-defs/share/arch/ql-eos-s3_wlcsp/pinmap_PU64.csv'...
Processing cells...
  type       | net        | pad        | loc      | type     | instance
 ------------+------------+------------+----------+----------+-----------
  inpad      | b1         | 5          | X6Y3     | BIDIR    | $iopadmap$main.b1
  inpad      | b2         | 6          | X8Y3     | BIDIR    | $iopadmap$main.b2
  inpad      | b3         | 2          | X10Y3    | BIDIR    | $iopadmap$main.b3
  inpad      | b4         | 3          | X12Y3    | BIDIR    | $iopadmap$main.b4
  outpad     | disp(0)    | 64         | X14Y3    | BIDIR    | $iopadmap$main.disp
  outpad     | disp(1)    | 62         | X16Y3    | BIDIR    | $iopadmap$main.disp_1
  outpad     | disp(2)    | 63         | X18Y3    | BIDIR    | $iopadmap$main.disp_2
  outpad     | disp(3)    | 61         | X20Y3    | BIDIR    | $iopadmap$main.disp_3
  outpad     | power(0)   | 60         | X22Y3    | BIDIR    | $iopadmap$main.power
  outpad     | power(1)   | 59         | X24Y3    | BIDIR    | $iopadmap$main.power_1
  outpad     | power(2)   | 57         | X26Y3    | BIDIR    | $iopadmap$main.power_2
  outpad     | power(3)   | 56         | X28Y3    | BIDIR    | $iopadmap$main.power_3
  outpad     | power(4)   | 55         | X30Y3    | BIDIR    | $iopadmap$main.power_4
  outpad     | power(5)   | 54         | X32Y3    | BIDIR    | $iopadmap$main.power_5

6. Executing Verilog backend.
Dumping module `\main'.

7. Executing TECHMAP pass (map to technology primitives).

7.1. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

7.2. Continuing TECHMAP pass.
Using template logic_1 for cells of type logic_1.
Using template logic_0 for cells of type logic_0.
No more expansions possible.
<suppressed ~2 debug messages>

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/share/techmaps/quicklogic/pp3/techmap/cells_map.v' to AST representation.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\inpad'.
Generating RTLIL representation for module `\outpad'.
Generating RTLIL representation for module `\bipad'.
Generating RTLIL representation for module `\ckpad'.
Generating RTLIL representation for module `\qhsckibuff'.
Generating RTLIL representation for module `\qhsckbuff'.
Generating RTLIL representation for module `\gclkbuff'.
Generating RTLIL representation for module `\logic_cell_macro'.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\mux2x0'.
Generating RTLIL representation for module `\mux4x0'.
Generating RTLIL representation for module `\mux8x0'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffc'.
Generating RTLIL representation for module `\dffp'.
Generating RTLIL representation for module `\dffpc'.
Generating RTLIL representation for module `\dffe'.
Generating RTLIL representation for module `\dffec'.
Generating RTLIL representation for module `\dffepc'.
Generating RTLIL representation for module `\dffsc'.
Generating RTLIL representation for module `\qlal4s3b_cell_macro'.
Generating RTLIL representation for module `\qlal4s3_mult_32x32_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_16x16_cell'.
Generating RTLIL representation for module `\qlal4s3_mult_cell_macro'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
Using template qlal4s3b_cell_macro for cells of type qlal4s3b_cell_macro.
Using template $paramod$4a30532bc133c2eb9cd5f67b9a7151b65f5b78fc\LUT3 for cells of type LUT3.
Using template dff for cells of type dff.
Using template $paramod$5312816914ac0257eca33ac3be87fd42e64349ca\LUT3 for cells of type LUT3.
Using template $paramod\LUT3\INIT=9'000000001\EQN=8'00110000 for cells of type LUT3.
Using template $paramod$bf21fee4b6975de7353dd955d4b3a8eef751c7c5\LUT2 for cells of type LUT2.
Using template $paramod$e7e37961662412d7dd1961919c60cc96c5b16f01\LUT2 for cells of type LUT2.
Using template $paramod$8ec3083c78151c28b65d6aa206d62ef0216666fd\LUT3 for cells of type LUT3.
Using template $paramod$a3585111a807d9eb68f35b3cdf72c072f00fd2ee\LUT2 for cells of type LUT2.
Using template $paramod$08b61d33fc5053edb3ff48cc7932a6bed21127f8\LUT3 for cells of type LUT3.
Using template $paramod$86fc6f3441a6779c63af6935d48b3ebd1c0460a9\LUT3 for cells of type LUT3.
Using template $paramod$ef89328d7363dd7125c1eba8428f7d9cbe4f3212\LUT2 for cells of type LUT2.
Using template $paramod$0bac8de66bcfb448c202f31a4c603d45054ce4da\LUT4 for cells of type LUT4.
Using template $paramod$effdcfc01bda4dbdfcb4c8c3f2f7837ae0cbd331\LUT4 for cells of type LUT4.
Using template $paramod$1afc89537ee5f3f94914f73379ca86af781a134c\LUT4 for cells of type LUT4.
Using template $paramod$0dee8c45763e54f30353b4988d9129c450b64183\LUT3 for cells of type LUT3.
Using template $paramod$3494bf91dff70d828c5f5312272dede938de1112\inpad for cells of type inpad.
Using template $paramod\LUT1\INIT=1'1\EQN=675885097 for cells of type LUT1.
Using template $paramod$49ac275091341c6b3545739eefd0128158c45134\inpad for cells of type inpad.
Using template dffe for cells of type dffe.
Using template $paramod$479164122f6233c90fb1301d4db36001bb032146\inpad for cells of type inpad.
Using template $paramod$8a2b710cf07fc1a26795eace150f0e78d8dba185\LUT3 for cells of type LUT3.
Using template $paramod$03eed137224500a5a8c1bb8d02f1b39dd96a7b82\LUT2 for cells of type LUT2.
Using template $paramod$60512bc3a8de051e95ae08443c3979dfecc7937e\LUT3 for cells of type LUT3.
Using template mux4x0 for cells of type mux4x0.
Using template $paramod$8a2feb93738ef18b8c10b1072c54f2f90a829eaa\LUT3 for cells of type LUT3.
Using template $paramod$d0072a8af4321893630082a1108feac18ea2649c\LUT3 for cells of type LUT3.
Using template $paramod$ed30829c13b3acb9519b3f008c9df903da206e61\inpad for cells of type inpad.
Using template $paramod$599d262041b1d3a38da932c48ee6b03f5bd83570\LUT3 for cells of type LUT3.
Using template $paramod$e26d5f83608228413558872bf585b830a9f56b6a\LUT2 for cells of type LUT2.
Using template $paramod$b7420168b4c7f5b0c647cfee87c3adf66c456bf4\LUT3 for cells of type LUT3.
Using template $paramod$2f9c59955bd68af8c158394348f8af07a2f0a88c\LUT3 for cells of type LUT3.
Using template $paramod$2760d949562be3a1888b531500ae2c18edae8891\LUT3 for cells of type LUT3.
Using template $paramod$029fb7df092d5131df78ff0be68aad451d319cc4\LUT3 for cells of type LUT3.
Using template $paramod$a05482f0aefd17419d352e885b744935e93eea82\LUT3 for cells of type LUT3.
Using template $paramod$73295daa79cd8f21300ad173a8fb0822f56672dc\LUT3 for cells of type LUT3.
Using template $paramod$a29fbc6a90f3f74f03beb13f1e9f6984833d21cb\LUT4 for cells of type LUT4.
Using template $paramod$eaa5b8ce31b5b445eaa93b247abc2c39669e1302\LUT3 for cells of type LUT3.
Using template $paramod$abf859cab5575c64ffc9195e9f8073a3f6386df6\LUT3 for cells of type LUT3.
Using template $paramod$d6994d0c267e294db2ae8ab4933a797e47cb57af\LUT3 for cells of type LUT3.
Using template $paramod$e64d32d20d7efced7d6e79c229f687bbe4091c0f\LUT3 for cells of type LUT3.
Using template $paramod$4be067e2764d3c18f065526d2d8c8a56fd9db269\LUT3 for cells of type LUT3.
Using template mux8x0 for cells of type mux8x0.
Using template $paramod$1ff3cb955baebb34bce84175d8b64f00bac588c5\outpad for cells of type outpad.
Using template $paramod$20836409dd4d4eddd1bf52e531e01fc3f9ef0633\outpad for cells of type outpad.
Using template $paramod$fa3380cd31d3eaf3369d75f1d1b91f2cba5e8470\outpad for cells of type outpad.
Using template $paramod$666d57638572eef64b702648a4829c6da6ea5f7a\outpad for cells of type outpad.
Using template $paramod$d8b4ab69a8b5413c066ad38d899c9d4a3dedc93a\outpad for cells of type outpad.
Using template $paramod$adb3e2998d36d23e78e72d530fe94019908a146e\outpad for cells of type outpad.
Using template $paramod$02aa829d7bb4d3bbae67ad5ee2e5a326704559e9\outpad for cells of type outpad.
Using template $paramod$8710e5724ea7597aec6f86bf8982eb7dcf6e45e0\outpad for cells of type outpad.
Using template $paramod$4da62a2f3593426548f45892aaeb7356ad46a6a4\outpad for cells of type outpad.
Using template $paramod$03fa78d84bd5e07f6e124fa217a4ce84543d615a\outpad for cells of type outpad.
No more expansions possible.
<suppressed ~996 debug messages>

9. Executing TECHMAP pass (map to technology primitives).

9.1. Executing Verilog-2005 frontend: /root/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v
Parsing Verilog input from `/root/symbiflow/quicklogic-arch-defs/bin/../share/arch/ql-eos-s3_wlcsp/cells/ram_map.v' to AST representation.
Generating RTLIL representation for module `\ram8k_2x1_cell_macro'.
Successfully finished Verilog frontend.

9.2. Continuing TECHMAP pass.
No more expansions possible.

10. Executing OPT_EXPR pass (perform const folding).
Optimizing module main.
<suppressed ~1004 debug messages>

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \main..
Removed 0 unused cells and 403 unused wires.
<suppressed ~1 debug messages>

12. Executing SETUNDEF pass (replace undef values with defined constants).

13. Printing statistics.

=== main ===

   Number of wires:               2503
   Number of wire bits:           2620
   Number of public wires:        2470
   Number of public wire bits:    2470
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                344
     ASSP                            1
     BIDIR_CELL                     14
     C_FRAG                         14
     F_FRAG                          4
     Q_FRAG                        107
     T_FRAG                        204

14. Executing JSON backend.

15. Executing Verilog backend.
Dumping module `\main'.

Warnings: 24 unique messages, 27 total
End of script. Logfile hash: 395cd0cd52, CPU: user 2.20s system 0.09s, MEM: 242.96 MB peak
Yosys 0.9+2406 (git sha1 ca763e6d5, gcc 11.4.0-1ubuntu1~22.04 -fPIC -Os)
Time spent: 50% 18x read_verilog (1 sec), 11% 4x write_verilog (0 sec), ...
